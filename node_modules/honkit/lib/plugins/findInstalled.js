"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const read_installed_1 = __importDefault(require("read-installed"));
const immutable_1 = __importDefault(require("immutable"));
const path_1 = __importDefault(require("path"));
const promise_1 = __importDefault(require("../utils/promise"));
const fs_1 = __importDefault(require("../utils/fs"));
const plugin_1 = __importDefault(require("../models/plugin"));
const pluginPrefix_1 = __importDefault(require("../constants/pluginPrefix"));
/**
 * Validate if a package name is a GitBook/HonKit plugin
 *
 * @return {boolean}
 */
function validateId(name) {
    return name && name.indexOf(pluginPrefix_1.default) === 0;
}
/**
 * List all packages installed inside a folder
 *
 * @param {string} folder
 * @return {OrderedMap<String:Plugin>}
 */
function findInstalled(folder) {
    const options = {
        dev: false,
        log: function () { },
        depth: 4,
    };
    let results = immutable_1.default.OrderedMap();
    function onPackage(pkg, parent) {
        if (!pkg.name)
            return;
        const name = pkg.name;
        const version = pkg.version;
        const pkgPath = pkg.realPath;
        const depth = pkg.depth;
        const dependencies = pkg.dependencies;
        const pluginName = name.slice(pluginPrefix_1.default.length);
        if (!validateId(name)) {
            if (parent)
                return;
        }
        else {
            results = results.set(pluginName, new plugin_1.default({
                name: pluginName,
                version: version,
                path: pkgPath,
                depth: depth,
                parent: parent,
            }));
        }
        immutable_1.default.Map(dependencies).forEach((dep) => {
            onPackage(dep, pluginName);
        });
    }
    // Search for gitbook-plugins in node_modules folder
    const node_modules = path_1.default.join(folder, "node_modules");
    // List all folders in node_modules
    return fs_1.default
        .readdir(node_modules)
        .fail(() => {
        return promise_1.default([]);
    })
        .then((modules) => {
        return promise_1.default.serie(modules, (module) => {
            // Not a gitbook-plugin
            if (!validateId(module)) {
                return promise_1.default();
            }
            // Read gitbook-plugin package details
            const module_folder = path_1.default.join(node_modules, module);
            return promise_1.default.nfcall(read_installed_1.default, module_folder, options).then((data) => {
                // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.
                onPackage(data);
            });
        });
    })
        .then(() => {
        // Return installed plugins
        return results;
    });
}
exports.default = findInstalled;
