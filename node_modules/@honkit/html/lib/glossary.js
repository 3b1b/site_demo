"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// const dom = require("./dom");
const dom = __importStar(require("./dom"));
/**
    Parse an HTML content into a list of glossary entry

    @param {string} html
    @return {Array}
*/
function parseGlossary(html) {
    const $ = dom.parse(html);
    const entries = [];
    $("h2").each(function () {
        const $heading = $(this);
        const $next = $heading.next();
        const $p = $next.is("p") ? $next.first() : $next.find("p").first();
        const entry = {};
        entry.name = $heading.text();
        entry.description = $p.text();
        entries.push(entry);
    });
    return entries;
}
exports.default = parseGlossary;
