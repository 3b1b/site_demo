"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const totext_1 = __importDefault(require("./totext"));
// import
const summary_1 = __importDefault(require("./summary"));
const glossary_1 = __importDefault(require("./glossary"));
const langs_1 = __importDefault(require("./langs"));
const readme_1 = __importDefault(require("./readme"));
const page_1 = __importDefault(require("./page"));
const htmlParser = {
    summary: summary_1.default,
    glossary: glossary_1.default,
    langs: langs_1.default,
    readme: readme_1.default,
    page: page_1.default,
};
// Compose a function with a transform function for the first argument only
function compose(toHTML, fn) {
    return function () {
        const args = lodash_1.default.toArray(arguments);
        args[0] = toHTML(args[0]);
        return fn.apply(null, args);
    };
}
// Create a HonKit parser from an HTML converter
function createParser(toHTML, toText = undefined) {
    if (lodash_1.default.isFunction(toHTML)) {
        toHTML = {
            inline: toHTML,
            block: toHTML,
        };
    }
    const parser = {
        summary: compose(toHTML.block, htmlParser.summary),
        glossary: compose(toHTML.block, htmlParser.glossary),
        langs: compose(toHTML.block, htmlParser.langs),
        readme: compose(toHTML.block, htmlParser.readme),
        page: compose(toHTML.block, htmlParser.page),
        inline: compose(toHTML.inline, htmlParser.page),
    };
    // @ts-expect-error
    const _toText = new totext_1.default(toText);
    parser.summary.toText = _toText.summary;
    parser.langs.toText = _toText.langs;
    parser.glossary.toText = _toText.glossary;
    return parser;
}
module.exports = createParser(lodash_1.default.identity);
module.exports.createParser = createParser;
